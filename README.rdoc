- Add Admin Functionality to App:

Authentication updates:

1) Show recipe page -> Ability to edit/update only own recipe
2) Navigation partial -> Toggle Menu, restrict new
3) Restrict thumbs up and thumbs down action to logged_in users only
4) Recipe - update to current_user
5) Like - update to current_user
6) Before_action :require_user, except: [:show, :index]
7) Before_action :require_same_user for chefs, only: [:edit, :update]

Features of chef authentication system:
- Add passwords to the chefs table so chefs can be authenticated and logged in
- Use email as log in credentials, since email is unique
- Ability to register new chefs to use the app
- Ability to display chefs profile
- Ability to list chefs using the app
- Ability for chefs to log in and log out of the app
- Restrict actions like create recipe, edit recipe and like feature to loggied in chefs only
- Restricting edit of recipes by chefs who created the recipes



testing specs for chefs:
chefname: string
email: string

- chefname must be present
- chefname must be between 3 characters and less than 40 characters
- email must be present
- email must be unique 
- email must be valid

Testing - 

Unit Tests
- models, views, routes etc
- each individual is tested one item at a time
- typically results in very good coverage

Functional Tests
- controllers
- testing multiple components and how they collaberate with each other
- multiple models in a process

Integration Tests
- Integration test is when a business process is followed to completion to meet a business objective
- Typically involves emulating a user, for example logging in and clicking on a ppurchase button or links etc

testing specs for recipes: 
name:string
summary: text
description: text

- name must be present
- name must be between 5 characters and less than 100 characters
- summary must be between 10 characters and less than 150 characters
- description must be between 20 and 500 characters
- chef_id must be present 


== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.
